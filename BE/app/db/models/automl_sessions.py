import uuid
from sqlalchemy import Column, Integer, String, DateTime, JSON, ForeignKey, Text, Boolean
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from app.db.base import Base

class AutoMLSession(Base):
    __tablename__ = 'automl_sessions'

    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    name = Column(String, index=True, nullable=True)
    dataset_id = Column(Integer, ForeignKey('datasets.id', ondelete='CASCADE'), nullable=False)
    target_column = Column(String, nullable=False)
    feature_columns = Column(JSON, nullable=True) # Store list used for setup
    config = Column(JSON, nullable=True) # Store initial setup config

    # --- Overall Session Status ---
    # Tracks the latest state of the session across all steps
    overall_status = Column(String, index=True, default="initialized", nullable=False)
    error_message = Column(Text, nullable=True) # For fatal session-level errors

    # --- Step 1: Setup & Compare ---
    step1_status = Column(String, index=True, default="pending", nullable=True) # pending, running, completed, failed
    step1_started_at = Column(DateTime(timezone=True), nullable=True)
    step1_completed_at = Column(DateTime(timezone=True), nullable=True)
    step1_results = Column(JSON, nullable=True) # Store best_model_id, maybe comparison summary?
    step1_experiment_path = Column(String, nullable=True) # Path to saved experiment.pkl
    step1_mlflow_run_id = Column(String, nullable=True) # MLflow run for this step
    task_type = Column(String, nullable=True) # Detected task type from step 1

    # --- Step 2: Tune & Analyze ---
    step2_status = Column(String, index=True, default="pending", nullable=True) # pending, running, completed, failed
    step2_started_at = Column(DateTime(timezone=True), nullable=True)
    step2_completed_at = Column(DateTime(timezone=True), nullable=True)
    step2_model_id_tuned = Column(String, nullable=True) # ID of the model user chose to tune (e.g., 'rf')
    step2_results = Column(JSON, nullable=True) # Store best_params, cv_metrics?
    step2_tuned_model_path_base = Column(String, nullable=True) # Base path to saved tuned_*.pkl/json
    step2_mlflow_run_id = Column(String, nullable=True) # MLflow run for this step

    # --- Step 3: Finalize ---
    step3_status = Column(String, index=True, default="pending", nullable=True) # pending, running, completed, failed
    step3_started_at = Column(DateTime(timezone=True), nullable=True)
    step3_completed_at = Column(DateTime(timezone=True), nullable=True)
    #step3_final_model_id = Column(UUID(as_uuid=True), ForeignKey("finalized_models.id"), nullable=True) # Link to the single final model created
    step3_mlflow_run_id = Column(String, nullable=True) # MLflow run for this step

    # --- Timestamps ---
    created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    updated_at = Column(DateTime(timezone=True), onupdate=func.now()) # Tracks any update

    # --- Relationships ---
    datasets = relationship('Dataset', back_populates='automl_sessions')

    # Relationship to the single Finalized Model generated by Step 3
    # Use uselist=False for one-to-one (or one-to-zero/one) from Session perspective
    finalized_models = relationship("FinalizedModel", back_populates="automl_sessions", uselist=False, cascade="all, delete-orphan")